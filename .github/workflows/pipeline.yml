name: Appdome Build-2secure - Latest Flow

on:
  push:
    branches:
      - eldan_pipeline

jobs:
  Presign_URLs:
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: install boto3
        run: |
          python -m pip install --upgrade pip
          pip install boto3
        shell: bash

      - name: Generate and Publish Presigned URLs
        run: python pipeline/aws_signer.py
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload Presigned URLs Artifact
        uses: actions/upload-artifact@v3
        with:
          name: presigned-urls
          path: presigned_urls

  APK_SIGN_ON_APPDOME:
    needs: Presign_URLs
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Presigned URLs Artifact
        uses: actions/download-artifact@v3
        with:
          name: presigned-urls
          path: presigned-urls

      - name: Read APK App and Keystore URLs
        run: |
          apk_app_url=$(cat presigned-urls/apk_app.txt)
          keystore_file_url=$(cat presigned-urls/keystore_file.txt)
          echo "APK_APP=$apk_app_url" >> $GITHUB_OUTPUT
          echo "KEYSTORE_FILE=$keystore_file_url" >> $GITHUB_OUTPUT
        id: urls

      - name: Set random options
        id: random-options
        run: |
          if [[ $((RANDOM % 2)) == 1 ]]; then
            second_output=true
          else
            second_output=false
          fi
          if [[ $((RANDOM % 2)) == 1 ]]; then
            build_with_logs=true
          else
            build_with_logs=false
          fi
          if [[ $((RANDOM % 2)) == 1 ]]; then
            google_play_signing=true
          else
            google_play_signing=false
          fi
          build_to_test_options=("bitbar" "browserstack" "lambdatest" "saucelabs" "None")
          build_to_test_index=$((RANDOM % ${#build_to_test_options[@]}))
          output_name_options=("None" "test_app" "test_dir/test_app" "test_dir/test_app.aab" "test_app.apk")
          output_name_index=$((RANDOM % ${#build_to_test_options[@]}))
  
          echo "SECOND_OUTPUT=${second_output}" >> $GITHUB_OUTPUT
          echo "BUILD_WITH_LOGS=${build_with_logs}" >> $GITHUB_OUTPUT
          echo "OUTPUT_APP_NAME=${output_name_options[$output_name_index]}" >> $GITHUB_OUTPUT
          echo "BUILD_TO_TEST=${build_to_test_options[$build_to_test_index]}" >> $GITHUB_OUTPUT
          echo "GOOGLE-PLAY-SIGNING=${google_play_signing}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Run the Appdome plugin
        uses: Appdome/github_build-2secure@latest
        with:
          APPDOME_API_TOKEN: ${{secrets.APPDOME_API_KEY}}
          SIGN_OPTIONS: "SIGN_ON_APPDOME"
          APP_FILE: ${{ steps.urls.outputs.APK_APP }}
          KEYSTORE_FILE: ${{ steps.urls.outputs.KEYSTORE_FILE }}
          KEYSTORE_PASSWORD: ${{secrets.APPDOME_KEYSTORE_PASSWORD}}
          KEYSTORE_ALIAS: ${{secrets.APPDOME_KEYSTORE_ALIAS}}
          KEYSTORE_KEY_PASSWORD: ${{secrets.APPDOME_KEYSTORE_KEY_PASSWORD}}
          FUSION_SET_ID: ${{secrets.APPDOME_ANDROID_FUSION_SET_ID}}
          SIGN_FINGERPRINT: ${{secrets.APPDOME_SIGN_FINGERPRINT}}
          GOOGLE-PLAY-SIGNING: ${{ steps.random-options.outputs.GOOGLE-PLAY-SIGNING }}
          SECOND_OUTPUT: ${{ steps.random-options.outputs.SECOND_OUTPUT }}
          BUILD_WITH_LOGS: ${{ steps.random-options.outputs.BUILD_WITH_LOGS }}
          OUTPUT_APP_NAME: ${{ steps.random-options.outputs.OUTPUT_APP_NAME }}
          BUILD_TO_TEST: ${{ steps.random-options.outputs.BUILD_TO_TEST }}

      - name: Test Environment Variables
        run: |
          # Check if APPDOME_SECURED_APP exists and is not empty
          if [ -n "${{ env.APPDOME_SECURED_APP }}" ]; then
            echo "APPDOME_SECURED_APP exists and is not empty"
          else
            echo "Error: APPDOME_SECURED_APP is missing or empty"
            exit 1
          fi
          
          # Check APPDOME_SECURED_APP_SECOND_OUTPUT if SECOND_OUTPUT is true
          if [[ "${{ steps.random-options.outputs.SECOND_OUTPUT }}" == "true" ]]; then
            if [ -n "${{ env.APPDOME_SECURED_APP_SECOND_OUTPUT }}" ]; then
              echo "APPDOME_SECURED_APP_SECOND_OUTPUT exists and is not empty"
            else
              echo "Error: APPDOME_SECURED_APP_SECOND_OUTPUT is missing or empty"
              exit 1
            fi
          fi

      - name: download artifact
        uses: actions/download-artifact@v2
        with:
          name: workflow-artifact
          path: ${{ github.workspace }}/downloaded-artifact

      - name: Check Artifact
        run: |
          if [ -d "${{ github.workspace }}/downloaded-artifact" ]; then
            echo "Artifact exists"
            ls ${{ github.workspace }}/downloaded-artifact
          else
            echo "Error: Artifact not found"
            exit 1
          fi

      - uses: geekyeggo/delete-artifact@v2
        with:
            name: workflow-artifact

#  APK_PRIVATE_SIGNING:
#    needs: APK_SIGN_ON_APPDOME
#    runs-on: 'ubuntu-latest'
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Download Presigned URLs Artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: presigned-urls
#          path: presigned-urls
#
#      - name: Read APK App and Keystore URLs
#        run: |
#          apk_app_url=$(cat presigned-urls/apk_app.txt)
#          echo "APK_APP=$apk_app_url" >> $GITHUB_OUTPUT
#        id: urls
#
#      - name: Set random options
#        id: random-options
#        run: |
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            second_output=true
#          else
#            second_output=false
#          fi
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            build_with_logs=true
#          else
#            build_with_logs=false
#          fi
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            google_play_signing=true
#          else
#            google_play_signing=false
#          fi
#          build_to_test_options=("bitbar" "browserstack" "lambdatest" "saucelabs" "None")
#          build_to_test_index=$((RANDOM % ${#build_to_test_options[@]}))
#          output_name_options=("None" "test_app" "test_dir/test_app" "test_dir/test_app.aab" "test_app.apk")
#          output_name_index=$((RANDOM % ${#build_to_test_options[@]}))
#
#          echo "SECOND_OUTPUT=${second_output}" >> $GITHUB_OUTPUT
#          echo "BUILD_WITH_LOGS=${build_with_logs}" >> $GITHUB_OUTPUT
#          echo "OUTPUT_APP_NAME=${output_name_options[$output_name_index]}" >> $GITHUB_OUTPUT
#          echo "BUILD_TO_TEST=${build_to_test_options[$build_to_test_index]}" >> $GITHUB_OUTPUT
#          echo "GOOGLE-PLAY-SIGNING=${google_play_signing}" >> $GITHUB_OUTPUT
#        shell: bash
#
#      - name: Run the Appdome plugin
#        uses: Appdome/github_build-2secure@latest
#        with:
#          APPDOME_API_TOKEN: ${{secrets.APPDOME_API_KEY}}
#          SIGN_OPTIONS: "PRIVATE_SIGNING"
#          APP_FILE: ${{ steps.urls.outputs.APK_APP }}
#          FUSION_SET_ID: ${{secrets.APPDOME_ANDROID_FUSION_SET_ID}}
#          SIGN_FINGERPRINT: ${{secrets.APPDOME_SIGN_FINGERPRINT}}
#          GOOGLE-PLAY-SIGNING: ${{ steps.random-options.outputs.GOOGLE-PLAY-SIGNING }}
#          SECOND_OUTPUT: ${{ steps.random-options.outputs.SECOND_OUTPUT }}
#          BUILD_WITH_LOGS: ${{ steps.random-options.outputs.BUILD_WITH_LOGS }}
#          OUTPUT_APP_NAME: ${{ steps.random-options.outputs.OUTPUT_APP_NAME }}
#          BUILD_TO_TEST: ${{ steps.random-options.outputs.BUILD_TO_TEST }}
#
#  APK_AUTO_DEV_SIGNING:
#    needs: APK_PRIVATE_SIGNING
#    runs-on: 'ubuntu-latest'
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Download Presigned URLs Artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: presigned-urls
#          path: presigned-urls
#
#      - name: Read APK App and Keystore URLs
#        run: |
#          apk_app_url=$(cat presigned-urls/apk_app.txt)
#          echo "APK_APP=$apk_app_url" >> $GITHUB_OUTPUT
#        id: urls
#
#      - name: Set random options
#        id: random-options
#        run: |
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            build_with_logs=true
#          else
#            build_with_logs=false
#          fi
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            google_play_signing=true
#          else
#            google_play_signing=false
#          fi
#          build_to_test_options=("bitbar" "browserstack" "lambdatest" "saucelabs" "None")
#          build_to_test_index=$((RANDOM % ${#build_to_test_options[@]}))
#          output_name_options=("None" "test_app" "test_dir/test_app" "test_dir/test_app.aab" "test_app.apk")
#          output_name_index=$((RANDOM % ${#build_to_test_options[@]}))
#
#          echo "BUILD_WITH_LOGS=${build_with_logs}" >> $GITHUB_OUTPUT
#          echo "OUTPUT_APP_NAME=${output_name_options[$output_name_index]}" >> $GITHUB_OUTPUT
#          echo "BUILD_TO_TEST=${build_to_test_options[$build_to_test_index]}" >> $GITHUB_OUTPUT
#          echo "GOOGLE-PLAY-SIGNING=${google_play_signing}" >> $GITHUB_OUTPUT
#        shell: bash
#
#      - name: Run the Appdome plugin
#        uses: Appdome/github_build-2secure@latest
#        with:
#          APPDOME_API_TOKEN: ${{secrets.APPDOME_API_KEY}}
#          SIGN_OPTIONS: "AUTO_DEV_SIGNING"
#          APP_FILE: ${{ steps.urls.outputs.APK_APP }}
#          FUSION_SET_ID: ${{secrets.APPDOME_ANDROID_FUSION_SET_ID}}
#          SIGN_FINGERPRINT: ${{secrets.APPDOME_SIGN_FINGERPRINT}}
#          GOOGLE-PLAY-SIGNING: ${{ steps.random-options.outputs.GOOGLE-PLAY-SIGNING }}
#          BUILD_WITH_LOGS: ${{ steps.random-options.outputs.BUILD_WITH_LOGS }}
#          OUTPUT_APP_NAME: ${{ steps.random-options.outputs.OUTPUT_APP_NAME }}
#          BUILD_TO_TEST: ${{ steps.random-options.outputs.BUILD_TO_TEST }}
#
#  AAB_SIGN_ON_APPDOME:
#    needs: Presign_URLs
#    runs-on: 'ubuntu-latest'
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Download Presigned URLs Artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: presigned-urls
#          path: presigned-urls
#
#      - name: Read APK App and Keystore URLs
#        run: |
#          aab_app_url=$(cat presigned-urls/aab_app.txt)
#          keystore_file_url=$(cat presigned-urls/keystore_file.txt)
#          echo "AAB_APP=$aab_app_url" >> $GITHUB_OUTPUT
#          echo "KEYSTORE_FILE=$keystore_file_url" >> $GITHUB_OUTPUT
#        id: urls
#
#      - name: Set random options
#        id: random-options
#        run: |
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            second_output=true
#          else
#            second_output=false
#          fi
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            build_with_logs=true
#          else
#            build_with_logs=false
#          fi
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            google_play_signing=true
#          else
#            google_play_signing=false
#          fi
#          build_to_test_options=("bitbar" "browserstack" "lambdatest" "saucelabs" "None")
#          build_to_test_index=$((RANDOM % ${#build_to_test_options[@]}))
#          output_name_options=("None" "test_app" "test_dir/test_app" "test_dir/test_app.aab" "test_app.apk")
#          output_name_index=$((RANDOM % ${#build_to_test_options[@]}))
#
#          echo "SECOND_OUTPUT=${second_output}" >> $GITHUB_OUTPUT
#          echo "BUILD_WITH_LOGS=${build_with_logs}" >> $GITHUB_OUTPUT
#          echo "OUTPUT_APP_NAME=${output_name_options[$output_name_index]}" >> $GITHUB_OUTPUT
#          echo "BUILD_TO_TEST=${build_to_test_options[$build_to_test_index]}" >> $GITHUB_OUTPUT
#          echo "GOOGLE-PLAY-SIGNING=${google_play_signing}" >> $GITHUB_OUTPUT
#        shell: bash
#
#      - name: Run the Appdome plugin
#        uses: Appdome/github_build-2secure@latest
#        with:
#          APPDOME_API_TOKEN: ${{secrets.APPDOME_API_KEY}}
#          SIGN_OPTIONS: "SIGN_ON_APPDOME"
#          APP_FILE: ${{ steps.urls.outputs.AAB_APP }}
#          KEYSTORE_FILE: ${{ steps.urls.outputs.KEYSTORE_FILE }}
#          KEYSTORE_PASSWORD: ${{secrets.APPDOME_KEYSTORE_PASSWORD}}
#          KEYSTORE_ALIAS: ${{secrets.APPDOME_KEYSTORE_ALIAS}}
#          KEYSTORE_KEY_PASSWORD: ${{secrets.APPDOME_KEYSTORE_KEY_PASSWORD}}
#          FUSION_SET_ID: ${{secrets.APPDOME_ANDROID_FUSION_SET_ID}}
#          SIGN_FINGERPRINT: ${{secrets.APPDOME_SIGN_FINGERPRINT}}
#          GOOGLE-PLAY-SIGNING: ${{ steps.random-options.outputs.GOOGLE-PLAY-SIGNING }}
#          SECOND_OUTPUT: ${{ steps.random-options.outputs.SECOND_OUTPUT }}
#          BUILD_WITH_LOGS: ${{ steps.random-options.outputs.BUILD_WITH_LOGS }}
#          OUTPUT_APP_NAME: ${{ steps.random-options.outputs.OUTPUT_APP_NAME }}
#          BUILD_TO_TEST: ${{ steps.random-options.outputs.BUILD_TO_TEST }}
#
#  AAB_PRIVATE_SIGNING:
#    needs: AAB_SIGN_ON_APPDOME
#    runs-on: 'ubuntu-latest'
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Download Presigned URLs Artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: presigned-urls
#          path: presigned-urls
#
#      - name: Read APK App and Keystore URLs
#        run: |
#          aab_app_url=$(cat presigned-urls/aab_app.txt)
#          echo "AAB_APP=$aab_app_url" >> $GITHUB_OUTPUT
#        id: urls
#
#      - name: Set random options
#        id: random-options
#        run: |
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            second_output=true
#          else
#            second_output=false
#          fi
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            build_with_logs=true
#          else
#            build_with_logs=false
#          fi
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            google_play_signing=true
#          else
#            google_play_signing=false
#          fi
#          build_to_test_options=("bitbar" "browserstack" "lambdatest" "saucelabs" "None")
#          build_to_test_index=$((RANDOM % ${#build_to_test_options[@]}))
#          output_name_options=("None" "test_app" "test_dir/test_app" "test_dir/test_app.aab" "test_app.apk")
#          output_name_index=$((RANDOM % ${#build_to_test_options[@]}))
#
#          echo "SECOND_OUTPUT=${second_output}" >> $GITHUB_OUTPUT
#          echo "BUILD_WITH_LOGS=${build_with_logs}" >> $GITHUB_OUTPUT
#          echo "OUTPUT_APP_NAME=${output_name_options[$output_name_index]}" >> $GITHUB_OUTPUT
#          echo "BUILD_TO_TEST=${build_to_test_options[$build_to_test_index]}" >> $GITHUB_OUTPUT
#          echo "GOOGLE-PLAY-SIGNING=${google_play_signing}" >> $GITHUB_OUTPUT
#        shell: bash
#
#      - name: Run the Appdome plugin
#        uses: Appdome/github_build-2secure@latest
#        with:
#          APPDOME_API_TOKEN: ${{secrets.APPDOME_API_KEY}}
#          SIGN_OPTIONS: "PRIVATE_SIGNING"
#          APP_FILE: ${{ steps.urls.outputs.AAB_APP }}
#          FUSION_SET_ID: ${{secrets.APPDOME_ANDROID_FUSION_SET_ID}}
#          SIGN_FINGERPRINT: ${{secrets.APPDOME_SIGN_FINGERPRINT}}
#          GOOGLE-PLAY-SIGNING: ${{ steps.random-options.outputs.GOOGLE-PLAY-SIGNING }}
#          SECOND_OUTPUT: ${{ steps.random-options.outputs.SECOND_OUTPUT }}
#          BUILD_WITH_LOGS: ${{ steps.random-options.outputs.BUILD_WITH_LOGS }}
#          OUTPUT_APP_NAME: ${{ steps.random-options.outputs.OUTPUT_APP_NAME }}
#          BUILD_TO_TEST: ${{ steps.random-options.outputs.BUILD_TO_TEST }}
#
#  AAB_AUTO_DEV_SIGNING:
#    needs: AAB_PRIVATE_SIGNING
#    runs-on: 'ubuntu-latest'
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Download Presigned URLs Artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: presigned-urls
#          path: presigned-urls
#
#      - name: Read APK App and Keystore URLs
#        run: |
#          aab_app_url=$(cat presigned-urls/aab_app.txt)
#          echo "AAB_APP=$aab_app_url" >> $GITHUB_OUTPUT
#        id: urls
#
#      - name: Set random options
#        id: random-options
#        run: |
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            build_with_logs=true
#          else
#            build_with_logs=false
#          fi
#          if [[ $((RANDOM % 2)) == 1 ]]; then
#            google_play_signing=true
#          else
#            google_play_signing=false
#          fi
#          build_to_test_options=("bitbar" "browserstack" "lambdatest" "saucelabs" "None")
#          build_to_test_index=$((RANDOM % ${#build_to_test_options[@]}))
#          output_name_options=("None" "test_app" "test_dir/test_app" "test_dir/test_app.aab" "test_app.apk")
#          output_name_index=$((RANDOM % ${#build_to_test_options[@]}))
#
#          echo "BUILD_WITH_LOGS=${build_with_logs}" >> $GITHUB_OUTPUT
#          echo "OUTPUT_APP_NAME=${output_name_options[$output_name_index]}" >> $GITHUB_OUTPUT
#          echo "BUILD_TO_TEST=${build_to_test_options[$build_to_test_index]}" >> $GITHUB_OUTPUT
#          echo "GOOGLE-PLAY-SIGNING=${google_play_signing}" >> $GITHUB_OUTPUT
#        shell: bash
#
#      - name: Run the Appdome plugin
#        uses: Appdome/github_build-2secure@latest
#        with:
#          APPDOME_API_TOKEN: ${{secrets.APPDOME_API_KEY}}
#          SIGN_OPTIONS: "AUTO_DEV_SIGNING"
#          APP_FILE: ${{ steps.urls.outputs.AAB_APP }}
#          FUSION_SET_ID: ${{secrets.APPDOME_ANDROID_FUSION_SET_ID}}
#          SIGN_FINGERPRINT: ${{secrets.APPDOME_SIGN_FINGERPRINT}}
#          GOOGLE-PLAY-SIGNING: ${{ steps.random-options.outputs.GOOGLE-PLAY-SIGNING }}
#          BUILD_WITH_LOGS: ${{ steps.random-options.outputs.BUILD_WITH_LOGS }}
#          OUTPUT_APP_NAME: ${{ steps.random-options.outputs.OUTPUT_APP_NAME }}
#          BUILD_TO_TEST: ${{ steps.random-options.outputs.BUILD_TO_TEST }}